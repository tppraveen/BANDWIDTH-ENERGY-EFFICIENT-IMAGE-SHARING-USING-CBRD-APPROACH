/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bees;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import javax.swing.JFileChooser;
import java.util.Random;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import java.text.DecimalFormat;
import java.awt.image.RenderedImage;
import java.awt.Graphics2D;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.util.Iterator;
import java.util.Vector;
import java.util.List;
import java.util.ArrayList;
import java.util.HashSet;
import javax.imageio.IIOImage;
import javax.imageio.ImageIO;
import javax.imageio.ImageWriteParam;
import javax.imageio.ImageWriter;
import javax.imageio.stream.ImageOutputStream;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author admin
 */
public class UserFrame extends javax.swing.JFrame {

    /**
     * Creates new form ClientFrame
     */
    Details dt=new Details();
    DecimalFormat df=new DecimalFormat("#.####");
    public UserFrame() 
    {
        initComponents();
        deleteImage("orgimage");
        deleteImage("compr");
        deleteImage("rescompr");
        
        try
        {
            Random rn=new Random();
            int e1=rn.nextInt((15 - 5) + 1) + 5;
            dt.Ebat=(double)e1;
            jLabel3.setText("Ebat = "+e1+"%");
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Bookman Old Style", 0, 30)); // NOI18N
        jLabel1.setText("BEES Client");

        jTabbedPane1.setFont(new java.awt.Font("Book Antiqua", 0, 18)); // NOI18N

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setFont(new java.awt.Font("Bookman Old Style", 0, 17)); // NOI18N
        jLabel2.setText("Select ");

        jTextField1.setEditable(false);

        jButton1.setFont(new java.awt.Font("Bookman Old Style", 0, 17)); // NOI18N
        jButton1.setText("Browse");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Monospaced", 0, 16)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel3.setFont(new java.awt.Font("Bookman Old Style", 0, 17)); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(54, 54, 54)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
                            .addComponent(jTextField1))
                        .addGap(74, 74, 74)
                        .addComponent(jButton1)))
                .addContainerGap(209, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(43, 43, 43)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                .addGap(35, 35, 35))
        );

        jTabbedPane1.addTab("Select Images", jPanel2);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jButton2.setFont(new java.awt.Font("Bookman Old Style", 0, 17)); // NOI18N
        jButton2.setText("Compress Image");
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Bookman Old Style", 0, 17)); // NOI18N
        jButton3.setText("Extract Features");
        jButton3.setEnabled(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(305, 305, 305)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3)
                    .addComponent(jButton2))
                .addContainerGap(320, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addComponent(jButton2)
                .addGap(50, 50, 50)
                .addComponent(jButton3)
                .addContainerGap(217, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Feature Extraction", jPanel3);

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        jButton4.setFont(new java.awt.Font("Bookman Old Style", 0, 17)); // NOI18N
        jButton4.setText("Detect Redundant Image");
        jButton4.setEnabled(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTextArea2.setEditable(false);
        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Monospaced", 0, 16)); // NOI18N
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(261, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(263, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(jButton4)
                .addGap(38, 38, 38)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(62, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Redundancy Detection", jPanel4);

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        jButton5.setFont(new java.awt.Font("Bookman Old Style", 0, 17)); // NOI18N
        jButton5.setText("Upload Image");
        jButton5.setEnabled(false);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setFont(new java.awt.Font("Bookman Old Style", 0, 16)); // NOI18N
        jButton6.setText("Graph");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(309, 309, 309)
                .addComponent(jButton5)
                .addContainerGap(340, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton6)
                .addGap(85, 85, 85))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(111, 111, 111)
                .addComponent(jButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 198, Short.MAX_VALUE)
                .addComponent(jButton6)
                .addGap(30, 30, 30))
        );

        jTabbedPane1.addTab("Image Uploading", jPanel5);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(331, 331, 331)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 803, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1)
                .addGap(37, 37, 37)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 434, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try
        {
            JFileChooser ch = new JFileChooser();
            ch.setCurrentDirectory(new java.io.File("."));
            ch.setDialogTitle("Select Images");
            ch.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            ch.setAcceptAllFileFilterUsed(false);
            if (ch.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) 
            {
                File fe=ch.getSelectedFile();
                jTextField1.setText(fe.getAbsolutePath());
                File lt[]=fe.listFiles();
                String res="";
                for(int i=0;i<lt.length;i++)
                {
                    if(lt[i].getName().endsWith("jpg")||lt[i].getName().endsWith(".jpeg")||lt[i].getName().endsWith("JPG"))
                    {
                        dt.imgList.add(lt[i]);
                        BufferedImage bi=ImageIO.read(lt[i]);                        
                        ImageIO.write(bi, "jpg", new File("orgimage//"+lt[i].getName()));
                        res=res+lt[i].getName()+"\n";
                    }
                }
                System.out.println("Images = "+dt.imgList.size());
                System.out.println("Ebat = "+dt.Ebat);
                jButton2.setEnabled(true);
                jTextArea1.setText(res);
                
                
                DisplayImage di=new DisplayImage(dt.imgList);
                di.setVisible(true);           
                di.setBounds(0, 300, 1000, 400);            
                di.repaint();
            } 

        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        try
        {
            if(dt.imgList.isEmpty())
            {
                JOptionPane.showMessageDialog(this,"Select Images");
            }
            else
            {
                float c=0.4f-0.4f*((float)dt.Ebat/100);
                System.out.println("C = "+c);
                for(int i=0;i<dt.imgList.size();i++)
                {
                    File fe=new File(dt.imgList.get(i).toString());
                    double sz1=(double)fe.length()/1000.0;
                    
                    BufferedImage image=ImageIO.read(new File(dt.imgList.get(i).toString()));
                    Iterator<ImageWriter> writers = ImageIO.getImageWritersBySuffix("jpeg");
                    if (!writers.hasNext()) throw new IllegalStateException("No writers found");
                    ImageWriter writer = (ImageWriter) writers.next();
        
                    ImageWriteParam param = writer.getDefaultWriteParam();
                    param.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);
                    param.setCompressionQuality(c);
       
                    ByteArrayOutputStream bos = new ByteArrayOutputStream(32768);
                    ImageOutputStream ios = ImageIO.createImageOutputStream(bos);
                    writer.setOutput(ios);
                    writer.write(null, new IIOImage(image, null, null), param);
                    ios.flush(); 
                    ByteArrayInputStream in = new ByteArrayInputStream(bos.toByteArray());
                    RenderedImage out = ImageIO.read(in);
                    
                    ImageIO.write(out,"jpg",new File("compr//"+fe.getName()));
                    
                    File fe2=new File("compr//"+fe.getName());
                    double sz2=(double)fe2.length()/1000.0;
                    dt.graph2.add(sz1+"#"+sz2);
                }
                JOptionPane.showMessageDialog(this, "Image Compressed and Stored in compr...");
                
                jButton3.setEnabled(true);
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        try
        {
            //dt.siftFt=new Vector[dt.imgList.size()];
            long tim1=System.currentTimeMillis();
            for(int i=0;i<dt.imgList.size();i++)
            {
                File f1=new File(dt.imgList.get(i).toString());
                String name=f1.getName();
                String in1="compr\\"+name;
                //String out1="sift\\"+name;
                
                SIFT sif=new SIFT();
                //dt.siftFt[i]=sif.run1(in1);//, out1);
                Vector<Feature> ft1=sif.run1(in1);//, out1);
                
                float fat1[]=ft1.get(0).descriptor;
                String sfeat="";
            
                for(int j=0;j<fat1.length;j++)
                {
                    String g1=df.format(fat1[j]);
                    sfeat=sfeat+g1+"#";
                }
                dt.siftFt.add(sfeat);
            }
            long tim2=System.currentTimeMillis();
            
            long time1=tim2-tim1;
            double tm=time1/1000.0;
            dt.graph1.add(tm+"#SIFT");
            System.out.println("Time = "+time1+" : "+(time1/1000.0));
            
            //dt.orbFt=new List[dt.imgList.size()];
            long tm1=System.currentTimeMillis();
            for(int i=0;i<dt.imgList.size();i++)
            {
                File f1=new File(dt.imgList.get(i).toString());
                String name=f1.getName();
                String in1="compr\\"+name;
                BufferedImage bi =ImageIO.read(new File(in1));
                ORB or=new ORB();
              //  dt.orbFt[i]=or.getFeature(bi);
                List<FeaturePoint> ob1=or.getFeature(bi);
                String ofeat="";
                for(int j=0;j<ob1.size();j++)
                {
                    FeaturePoint fp=ob1.get(j);
                    ofeat=ofeat+fp.score()+"#";                    
                }                
                dt.orbFt.add(ofeat);
            }
            long tm2=System.currentTimeMillis();
            long time2=tm2-tm1;
            double otm=time2/1000.0;
            dt.graph1.add(otm+"#ORB");
            System.out.println("orb Time = "+time2+" : "+(time2/1000.0));
            JOptionPane.showMessageDialog(this, "Feature Extracted...");
           
            jButton4.setEnabled(true);
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        try
        {
            double T=(0.013 + 0.006*(dt.Ebat/100))*10;
            System.out.println("T = "+T);
            DBConnection db=new DBConnection();
            Statement st=db.stt;
            ResultSet rs=st.executeQuery("select * from imagestore");
            ArrayList imgName=new ArrayList();
            ArrayList sift=new ArrayList();
            ArrayList orb=new ArrayList();
            
            while(rs.next())
            {
                imgName.add(rs.getString(1));
                sift.add(rs.getString(2));
                orb.add(rs.getString(3));
            }
            
            
            for(int i=0;i<dt.siftFt.size();i++)
            {
                String g1=dt.siftFt.get(i).toString().trim().replace("#", " ");
                int flag=0;
                for(int j=0;j<sift.size();j++)
                {
                    String g2=sift.get(j).toString().trim().replace("#", " ");
                    double sim=jaccardSimilarity(g1,g2);
                    if(sim>=T)
                        flag=1;
                }
                if(flag==0)
                {
                    String im=dt.imgList.get(i).toString();
                    File fe=new File(im);
                    if(!dt.nonRed.contains(fe.getName()))
                        dt.nonRed.add(fe.getName());                    
                }
            }
            
            for(int i=0;i<dt.orbFt.size();i++)
            {
                String g1=dt.orbFt.get(i).toString().trim().replace("#", " ");
                int flag=0;
                for(int j=0;j<orb.size();j++)
                {
                    String g2=orb.get(j).toString().trim().replace("#", " ");
                    double sim=jaccardSimilarity(g1,g2);
                    if(sim>=T)
                        flag=1;
                }
                if(flag==0)
                {
                    String im=dt.imgList.get(i).toString();
                    File fe=new File(im);
                    if(!dt.nonRed.contains(fe.getName()))
                        dt.nonRed.add(fe.getName());                    
                }
            }
            
            
            for(int i=0;i<dt.siftFt.size();i++)
            {
                String g1=dt.siftFt.get(i).toString().trim().replace("#", " ");
                int flag=0;
                for(int j=i+1;j<dt.siftFt.size();j++)
                {
                    String g2=dt.siftFt.get(j).toString().trim().replace("#", " ");
                    double sim=jaccardSimilarity(g1,g2);
                    //System.out.println("si - "+i+" : "+j+" : "+sim);
                    if(sim>=T)
                        flag=1;
                }
                if(flag==0)
                {
                    String im=dt.imgList.get(i).toString();
                    File fe=new File(im);
                    if(!dt.nonRed.contains(fe.getName()))
                        dt.nonRed.add(fe.getName());                    
                    //System.out.println("sf== "+dt.imgList.get(i));
                }
            }
            
            for(int i=0;i<dt.orbFt.size();i++)
            {
                String g1=dt.orbFt.get(i).toString().trim().replace("#", " ");
                int flag=0;
                for(int j=i+1;j<dt.orbFt.size();j++)
                {
                    String g2=dt.orbFt.get(j).toString().trim().replace("#", " ");
                    double sim=jaccardSimilarity(g1,g2);
                    //System.out.println("or - "+i+" : "+j+" : "+sim);
                    if(sim>=T)
                        flag=1;
                }
                if(flag==0)
                {
                    String im=dt.imgList.get(i).toString();
                    File fe=new File(im);
                    if(!dt.nonRed.contains(fe.getName()))
                        dt.nonRed.add(fe.getName());                    
                    
                }
            }
            System.out.println("non red = "+dt.nonRed.size());
            
            String res="";
            for(int i=0;i<dt.nonRed.size();i++)
                res=res+dt.nonRed.get(i).toString()+"\n";
                        
            jTextArea2.setText(res);
            jButton5.setEnabled(true);
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        try
        {
            double Cr=0.8-(0.8*(dt.Ebat/100));
            
            for(int i=0;i<dt.imgList.size();i++)
            {
                String nm=dt.imgList.get(i).toString();
                File fes=new File(nm);
                File fe=new File("orgimage//"+fes.getName());
                double sz1=(double)fe.length()/1000.0;
                
                BufferedImage bi=ImageIO.read(fe);	
                int w=bi.getWidth();
                int h=bi.getHeight();
                
                int nW=(int)Math.ceil(Math.abs(w-(w*Cr)));
                int nH=(int)Math.ceil(Math.abs(h-(h*Cr)));
                
                System.out.println(w+" : "+Cr+" : "+nW);
                System.out.println(h+" : "+nH);
                
                BufferedImage bi2=resize(bi,nW,nH);
                ImageIO.write(bi2, "jpg", new File("rescompr//"+fes.getName()));
                
                File fe2=new File("rescompr//"+fes.getName());
                double sz2=(double)fe2.length()/1000.0;
                dt.graph3.add(sz1+"#"+sz2);
                
            }
            
            ArrayList org=new ArrayList();
            for(int i=0;i<dt.imgList.size();i++)
            {
                File fe=new File(dt.imgList.get(i).toString());
                org.add(fe.getName());
            }
            DBConnection db=new DBConnection();
            Connection con=db.con;
            Statement st=db.stt;
            ResultSet rs=st.executeQuery("select * from imagestore");
            
            ArrayList imName=new ArrayList();
            
            while(rs.next())
            {
                imName.add(rs.getString(1));
            }
            
            
            for(int i=0;i<dt.nonRed.size();i++)
            {
                String nm=dt.nonRed.get(i).toString();               
                if(imName.contains(nm))
                    continue;
                
                String ins1 = "insert into imagelt(ImgName, Img) values (?, ?)";
                PreparedStatement ps1 = con.prepareStatement(ins1);
                File file1 = new File("rescompr//"+nm);
                FileInputStream fis1 = new FileInputStream(file1);

                ps1.setString(1, nm);
                ps1.setBinaryStream(2, fis1, (int) file1.length());                        
                ps1.executeUpdate();
                
                int ind=org.indexOf(nm);
                String s1=dt.siftFt.get(ind).toString();
                String o1=dt.orbFt.get(ind).toString();
                
                
                Statement st1=db.stt;
                st1.executeUpdate("insert into imagestore values('"+nm+"','"+s1+"','"+o1+"')");
            }
            
            JOptionPane.showMessageDialog(this, "Image Uploaded...");
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        try
        {
            Graph1 gr=new Graph1();
            gr.displayGraph1();
            gr.displayGraph2();
            gr.displayGraph3();
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    
    public void deleteImage(String fn)
    {
        try
        {
            File fe1=new File(fn);
            File lt1[]=fe1.listFiles();
            for(int i=0;i<lt1.length;i++)
                lt1[i].delete();
            
            
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }
    
    public double jaccardSimilarity(String similar1, String similar2)
    {
	HashSet<String> h1 = new HashSet<String>();
	HashSet<String> h2 = new HashSet<String>();
		
	for(String s: similar1.split("\\s+"))
        {
            h1.add(s);		
	}
	
	for(String s: similar2.split("\\s+"))
        {
            h2.add(s);		
	}
		
	int sizeh1 = h1.size();
	h1.retainAll(h2);
	h2.removeAll(h1);
	int union = sizeh1 + h2.size();
	int intersection = h1.size();
	return (double)intersection/union;          
    }
    
    public BufferedImage resize(BufferedImage image, int width, int height) 
    {
	BufferedImage resizedImage = new BufferedImage(width, height,BufferedImage.TYPE_INT_RGB);
	Graphics2D g = resizedImage.createGraphics();
	g.drawImage(image, 0, 0, width, height, null);
	g.dispose();
	return resizedImage;
    } 
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
